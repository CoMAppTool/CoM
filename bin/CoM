#!/bin/bash
#
# Name: CoM  (Change of Management)
#
# Purpose: make it easy to document a change
#
# Author: Ed Drouillard on Aug 17, 2015
COPYRIGHT="Copyright (C) 2015-2024 Ed Drouillard, BCS, edrulrd at hotmail.com"
#
# The CoM Package is available at https://www.github.com/CoMAppTool/CoM
#

################################################################################
# Note: overriding settings, such as the location of the Change library should
#       go into /etc/CoM/etc/local.conf
################################################################################


# set -x  # uncomment to debug
# DEBUG=1 # uncomment to debug

test ! -z "${DEBUG}" && set > /tmp/set-before

# Define functions
function usage {
  echo "Usage: $(basename ${0}) [option]"
  echo "       Change of Management"
  echo "       Document a change in a folder/file"
  echo
  echo "$(basename ${0}) (with no option) - will prompt for a summary of the change to be recorded, then optionally edit the newly created file"
  echo
  echo "The following options are available"
  echo "-v     output $PROGRAM version information and exit"
  echo "-h     (or any unknown option) will display this help and exit"
  echo "-m     display the man page if not shown when \"man $PROGRAM\" is issued and then exit"
  echo
  echo "-e     [filename] edit the specified filename if given, or the most recent $PROGRAM change log file if not specified"
  echo "-l     show the most recent $PROGRAM change log file names and exit"
  echo "-L     show the folder location where we record $PROGRAM change log files and exit"
  echo "-s     show the summaries from the $PROGRAM change log files and exit"
  echo "-S     [string] search the $PROGRAM change log files for the specified string. Regular Expression searches are supported"
  echo
  echo "Note: only 0 or 1 option is allowed."
}

CALLEDAS=${0}
PROGRAM=$(basename ${0})
[ -h ${CALLEDAS} ] && CALLEDAS=$(readlink $CALLEDAS) # if a symbolic link, get the directory where the code is

test ! -z "${DEBUG}" && echo program initiated as "$CALLEDAS"
test ! -z "${DEBUG}" && echo PROGRAM is $PROGRAM

#######################################################################################
# Execution procedure:
# 1) If the program is called from the current directory or from a location that is not
#    the designated Installed bin location according to the definition in default.conf,
#    then the referenced library "etc" needs to be relative to it.
#
# 2) If the program is called from the installed location as defined by $CoM_Bin, then
# the referenced library should be from the designated Installed locations.  In
# particular, if the program is installed, /usr/share/CoM/etc will be defined,
# so we'll use that as an indicator as to where to load our variables from.
#######################################################################################

CoM_Lib=/var/log/CoM
#CoM_Lib=###CoM_Lib### # CoM_Lib will be uncommented and set if CoM is installed with the Makefile.

SHR_DIR=/usr/share/CoM/etc
#SHR_DIR=###CoM_SHR### # SHR_DIR will be uncommented and set if CoM is installed with the Makefile.
# default.conf will be in $SHR_DIR if installed, or can be relative to bin directory if not.

ETC_DIR=/etc/CoM/etc
#ETC_DIR=###CoM_ETC### # ETC_DIR will be uncommented and set if CoM is installed with the Makefile.
# local.conf will be in $ETC_DIR if installed, or can be relative to the bin directory if not.

# Get the folder that we're run from
MYPATH=$(dirname $(type ${CALLEDAS} | awk '{print $NF}'))
test ! -z "${DEBUG}" && echo MYPATH is set to $MYPATH

# Set up the default CoM settings first from the installed location if present,
# or relative to current directory where the program (typically bin) is installed, if not.
if [ -d ${SHR_DIR} ]
then
	[ ! -z "${DEBUG}" ] && [ -f ${SHR_DIR}/default.conf ] && echo executing ${SHR_DIR}/default.conf
	[ -f ${SHR_DIR}/default.conf ] && . ${SHR_DIR}/default.conf

	[ ! -z "${DEBUG}" ] && [ -f ${SHR_DIR}/local.conf ] && echo executing ${SHR_DIR}/local.conf
	[ -f ${SHR_DIR}/local.conf ]   &&  . ${SHR_DIR}/local.conf
fi

if [ -d ${ETC_DIR} ]
then
	[ ! -z "${DEBUG}" ] && [ -f ${ETC_DIR}/default.conf ] && echo executing ${ETC_DIR}/default.conf
	[ -f ${ETC_DIR}/default.conf ] && . ${ETC_DIR}/default.conf

	[ ! -z "${DEBUG}" ] && [ -f ${ETC_DIR}/local.conf ] && echo executing ${ETC_DIR}/local.conf
	[ -f ${ETC_DIR}/local.conf ]   &&  . ${ETC_DIR}/local.conf
fi




# If we're not running from the Makefile Installed bin directory, then let's reset our variables
# from an etc folder relative to the bin file we're called from
if [ "${MYPATH}" != "${CoM_Bin}" ]
then
	[ ! -z "${DEBUG}" ] && [ -f ${MYPATH}/etc/default.conf ] && echo executing ${MYPATH}/etc/default.conf
	[ -f ${MYPATH}/etc/default.conf ] && . ${MYPATH}/etc/default.conf

	[ ! -z "${DEBUG}" ] && [ -f ${MYPATH}/etc/local.conf ] && echo executing ${MYPATH}/etc/local.conf
	[ -f ${MYPATH}/etc/local.conf ] && . ${MYPATH}/etc/local.conf
fi


# We'll now confirm that at least one of our config file settings have been processed
if [ -z "${CoM_Config_Ran}" ]
then
	cat << MSG
CoM Error: Incomplete setup: Configuration settings have not been processed.  Exiting

Program settings within files "default.conf" or "local.conf" must be configured in any
of the following locations:

	${SHR_DIR}/default.conf
	${SHR_DIR}/local.conf
	${ETC_DIR}/default.conf
	${ETC_DIR}/local.conf
	${MYPATH}/etc/default.conf
	${MYPATH}/etc/local.conf

Copy default.conf from the installation package into any of these locations,
adjust as desired, and rerun ${PROGRAM}.
MSG
	exit 1
fi


if [ ! -d "${CoM_Lib}" ]
then
	echo "The repository where we will store changes is missing."
	echo "Folder location ${CoM_Lib} does not exist.  Create?: (Y|n)"
	read i
	case $i in
		y|Y|'')
			mkdir ${CoM_Lib}
			if [ $? -ne 0 ]
			then
				echo "Folder creation failed - not permitted?"
				exit 1
			fi
			;;
		*)
			echo "Changes must be saved in an existing folder"
			echo "Please set variable CoM_Lib in local.conf, and re-run the program"
			exit 1
			;;
	esac
fi
test ! -z "${DEBUG}" && echo Changes will be recorded in: "${CoM_Lib}"

cd $CoM_Lib

# We've now defined our environment, any special processing to do?


while getopts ":eslLmhvS:" Option   # edit, show summaries, list files, show change library name, help, help, version, search
do
	test ! -z "${DEBUG}" && echo "Option is set to ${Option}"
	case ${Option} in
		e     ) CFG_FN="yes";; # if Filename is specified, then edit that file and then exit, we manually extract the Filename
		v     ) echo ${PROGRAM} ${_VERSION}; exit 0;;
		h     ) echo ${PROGRAM} ${_VERSION}; usage; exit 0;;
		m     ) man ${MANDIR}/${PROGRAM}.8.gz; exit 0;;
		s     ) CFG_SUMMARY="yes";; # dump the Summary lines from the CoM files
		l     ) CFG_LIST="yes";; # list the last 10 CoM filenames
		L     ) echo "${PROGRAM} Change Library is ${CoM_Lib}"; exit 0;; # Display the library that our changes go into
		S     ) CFG_SEARCH="yes"; # search the CoM library for the (mandatory) string provided. Note Regular Expressions can be used
				findstr="${OPTARG}";; # set the string to search
		*     ) echo "$(basename $0): Unimplemented command line option given"; usage; exit 1;;   # DEFAULT
	esac
done

# Decrement the argument pointer so it points to next argument.
# shift $((${OPTIND} - 1))

if [ "${CFG_LIST}"  = 'yes' ]
then
	cd ${CoM_Lib}
	(\ls -a1 ${FileForm} | tail -10) 2>/dev/null
	exit 0
fi

if [ "${CFG_SUMMARY}"  = 'yes' ]
then
	cd ${CoM_Lib}
	echo "CoM library: ${CoM_Lib}"
	echo
	\ls -1 ${FileForm} 2>/dev/null | while read i
	do
		printf "%s:\n" ${i};  grep "^Summary:" ${i}
		echo # separate with a blank line
	done
	exit 0
fi

if [ "${CFG_SEARCH}"  = 'yes' ]
then
	cd ${CoM_Lib}
	echo
	\ls -1 ${FileForm} 2>/dev/null | while read i
	do
		if $(grep -q -iE "${findstr}" ${i}) # silently check if string is present ignoring case
		then
			printf "%s:\n" ${i}  # only print filename and string if present
			grep -iE "${findstr}" ${i}
			echo # separate with a blank line
		fi
	done
	exit 0
fi

if [ "${CFG_FN}"  = 'yes' ]
then
	if [ -z ${!OPTIND} ] # check if the OPTIND variable is not set, i.e. no file provided
	then
		cd ${CoM_Lib}
		Filename=$(\ls -a1 ${FileForm} 2>/dev/null | tail -1) 2>/dev/null
	else
		eval Filename=\$$OPTIND # set Filename to the value of OPTIND (i.e ${2), the filename passed)
	fi

	if [ -f ${CoM_Lib}/${Filename} ]
	then
		${EDITOR} ${CoM_Lib}/${Filename}
		exit 0
	else
		echo "ERROR: File not found!"
		exit 1
	fi
fi

umask 0006 # set permissions on files in the file repository to u=rw,g=rw,o=

# Let's finally get to recording the change we made.
# No Option provided, create a new record

Today=$(date +%Y%m%d)
Now=$(date +%c)
Now=$(date "+%a %b %d %Y %H:%M:%S %Z")


Lastone=`ls -1 | grep $Today | tail -1`
# echo Last one is $Lastone

if  [ x$Lastone = x ]
then
	Seq=1
	#first file of the day
	Seq=$(printf '%04i' $Seq)
else
	#Next file
	Seq=`echo $Lastone | cut -c 10-13`
	Seq=`echo $Seq | sed 's/^0*//'` # get rid of leading zeroes so it doesn't think we're dealing in octal
	Seq=$(($Seq+1))
	Seq=$(printf '%04i' $Seq)
fi
Filename=$Today.$Seq

DEFAULT_REASON="applied updates"
Reason=""
echo
echo "Enter a summary of the change being applied, ending the reason with a blank line [Default: ${DEFAULT_REASON}]"
while IFS= read i
do
	if [ x"$i" = x ]
	then
		if [ x"$Reason" = x ]
		then
			Reason=`printf "\n%s\n" "Summary: ${DEFAULT_REASON}"`
		fi
		break
	fi

	Reason=`printf "%s\n%s" "$Reason" "Summary: $i"`
done

[ -z "${OSLevel}" ] && $(lsb_release -sd 2> /dev/null)  # Debian
[ -z "${OSLevel}" ] && [ -x /usr/bin/oslevel 2> /dev/null ] && OSLevel=$(/usr/bin/oslevel)  # AIX
[ -z "${OSLevel}" ] && [ -f /etc/system-release ] && OSLevel=$(cat /etc/system-release) # RHEL
[ -z "${OSLevel}" ] && [ $(which uname) 2> /dev/null ] && OSLevel="$($(which uname) -sr 2>/dev/null)" # Solaris/HPUX/BSD

cat << EOF > $Filename
[Form: Change of Management]

/* General Information */
[Date: $Today]
[Form Number: $Filename ]
[Hostname: $(hostname) ]
[OS Level: ${OSLevel} ]
[Kernel: $(uname -a) ]

[Installer: $SUDO_USER as $(id -un) ]
[Installation Date: $Now ]
[Deinstallation Date: ]

/* Motivation */
[Reason for Change:
$Reason

]

/* Description */
[Affected File:
{File: }
{Change: }
{Details:

}

{File: }
{Change: }
{Details:

}

{File: }
{Change: }
{Details:

}

{File: }
{Change: }
{Details:

}

{File: }
{Change: }
{Details:

}

{File: }
{Change: }
{Details:

}
]

[Affected Device:
{Name: }
{Change: }
]
EOF

# Change the ownership of the file to the non root user that made the change
chown $SUDO_USER $Filename

echo "Edit the file ($Filename)?: (Y|n)"
read i
case $i in
	y|Y|'')
		case $(basename ${EDITOR}) in
			vi|vim)
				${EDITOR} +/Details:/ +/^$/ $Filename # Go to 1st blank line after Details:
				;;
			*)
				${EDITOR} $Filename
				;;
		esac
		;;
	*)
		;;
esac


test ! -z "${DEBUG}" && set > /tmp/set-after

exit
